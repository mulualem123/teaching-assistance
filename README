#Id CommandLine
   1 try { . "c:\Users\selon\AppData\Local\Programs\Microsoft VS Code\resources\app\out\vs\workbench\contrib\terminal\browser\media\shellIntegration.ps1" } catch {}
   2 & C:/Python311/python.exe c:/Users/selon/Documents/Projects/VSprojects/python/flask/TranslateChange/app.py
   3 py -3 -m venv .venv
   4 .venv\Scripts\activate
   5 pip install Flask
   6 python.exe -m pip install --upgrade pip
   7 flask run --host=0.0.0.0
   8 pip install requests
   9 flask run --host=0.0.0.0
  10 pip install pandas
  11 history
  12 !9
  13 flask run --host=0.0.0.0
  14 pip install openpyxl
  15 flask run --host=0.0.0.0
  16 pip install googletrans==4.0.0-rc1
  17 flask run --host=0.0.0.0
  18 & c:/Users/selon/Documents/Projects/VSprojects/python/flask/TranslateChange/.venv/Scripts/python.exe c:/Users/selon/Documents/Projects/VSprojects/python/flask/TranslateChange/app.py


############# Data Base #############
from flask import g
import sqlite3

def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect('data.sqlite')
    return db

@app.teardown_appcontext
def close_db(error):
    """Closes the database again at the end of the request."""
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

# Functions for working with the database
def query_db(query, args=(), one=False):
    cur = get_db().execute(query, args)
    res = cur.fetchall()
    return res[0] if res else None

def init_db():
    db = get_db()
    with app.open_resource('schema.sql') as f:
        db.cursor().executescript(f.read())
        
        
from flask_sqlalchemy import SQLAlchemy

app.config['SQLALCHEMY_DATABASE_URL'] = ''
db = SQLAlchemy (app)'

#directory in flask app / docker image
2024-05-08 02:37:06 Traceback (most recent call last):
2024-05-08 02:37:06   File "/app/app.py", line 1, in <module>
2024-05-08 02:37:06     from flask_package import app
2024-05-08 02:37:06   File "/app/flask_package/__init__.py", line 57, in <module>

#Limit resource for docker image (https://phoenixnap.com/kb/docker-memory-and-cpu-limit)
#Set Swap to Disk Memory Limit
##Swap allows Docker to store data by writing directly to the disk after exhausting all RAM assigned to the container.
docker run -dit --memory="512m" --memory-swap="1g" nginx
#Set Soft Limit to Container Memory
docker run -dit --memory="1g" --memory-reservation="512m" nginx
docker stats
#Limit Number of CPU Cores
docker run -dit --cpus="1.0" nginx
#port
docker run -d -p 5000:5000 teaching-assistance-01

docker run -d -p 5000:5000 -dit --memory="1g" --memory-reservation="512m" --cpus="1.0" teaching-assistance-01

 
        
<td><li class="list-group-item"><a href="{{ url_for('displayfromtable', mezmurid = row[0]) }}">{{ row[3] }}</a></li></td>


Increase and decrease fonts.
change the info and close bottons on the cards.


#############################################################################################################
Use Flask-Migrate (Recommended for non-destructive changes)
Install Flask-Migrate:

pip install Flask-Migrate

Setup Flask-Migrate: In your app.py, initialize Flask-Migrate:

from flask_migrate import Migrate
from models.user import User, db
from models.role import Role
from models import roles_users

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///roles.db'
app.config['SECRET_KEY'] = 'super-secret-key'
app.config['SECURITY_PASSWORD_SALT'] = 'super-secret-salt'

db.init_app(app)
migrate = Migrate(app, db)

user_datastore = SQLAlchemyUserDatastore(db, User, Role)
security = Security(app, user_datastore)

@app.route('/')
def home():
    return 'Welcome to the Flask app with roles!'

if __name__ == '__main__':
    with app.app_context():
        db.create_all()

    app.run(debug=True)
    
Initialize Migrations:
flask db init

Generate Migration:
flask db migrate -m "Add active field to User model"

Apply Migration:
flask db upgrade

DATABASE
    Sqlite3 database
        initialazation in __int__.py
            # database location is teaching-assistance/flask_package/instance/site.db
            from . import db 
            app.config['DATABASE'] = r'flask_package/instance/site.db'
            db.init_app(app) #initiating sqlite3
        initialization in db.py
            def get_db():
                if 'db' not in g:
                    g.db = sqlite3.connect(
                        current_app.config['DATABASE'],
                        detect_types=sqlite3.PARSE_DECLTYPES
                    )
                    g.db.row_factory = sqlite3.Row
                return g.db
            
            def init_db():
                db = get_db()
                with current_app.open_resource('schema.sql') as f: db.executescript(f.read().decode('utf8'))

            @click.command('init-db')
            def init_db_command():
                """Clear the exitsting data and create new tables"""
                init_db()
                click.echo('Initialized the database.')
                
            def init_app(app):
                app.teardown_appcontext(close_db) 
                app.cli.add_command(init_db_command)
        initialization in terminal #sqlite3     
            flask --app flask_package init-db #This function initializes the database by executing the SQL commands from the schema.sql file.
            flask --app flask_package --help 
                    #init-db  Clear the exitsting data and create new tables
                    #routes   Show the routes for the app.
                    #run      Run a development server.
                    #shell    Run a shell in the app context. 
        Update DB ??????
                                         
    SQLAlchemy database
        initialaztion in __int__.py
             # database location is teaching-assistance/instance/users.db    
            from .models import db as account_db,
            app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db' #Account creation
            account_db.init_app(app)    #Account creation
        initialization in models.py
            from flask_sqlalchemy import SQLAlchemy
            db = SQLAlchemy()
