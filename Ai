import os
import fitz
from pptx import Presentation
from flask import Flask, request, send_file

app = Flask(__name__)

@app.route('/text-extraction', methods=['POST'])
def text_extraction():
    # Get the uploaded file from the request
    f = request.files['file']
    # Get the file extension
    _, file_extension = os.path.splitext(f.filename)
    # Initialize an empty string to store the extracted text
    text = ""
    # Check the file extension
    if file_extension == '.pptx':
        # Read the PowerPoint file using python-pptx
        prs = Presentation(f)
        # Loop over the slides and shapes
        for slide in prs.slides:
            for shape in slide.shapes:
                # Check if the shape has text
                if shape.has_text_frame and shape.text_frame.has_text:
                    # Append the text to the text string
                    text += shape.text + "\n"
    elif file_extension == '.pdf':
        # Read the PDF file using pymupdf
        doc = fitz.open(stream=f.read(), filetype='pdf')
        # Loop over the pages
        for page in doc:
            # Get the text of the page
            text += page.get_text('text') + "\n"
    else:
        # Return an error message if the file extension is not supported
        return "Unsupported file format. Please upload a PowerPoint or PDF file."
    # Return the text as a Flask response
    return text

import os
import fitz
from pptx import Presentation
from flask import Flask, request, send_file

app = Flask(__name__)

@app.route('/text-extraction', methods=['POST'])
def text_extraction():
    # Get the uploaded file from the request
    f = request.files['file']
    # Get the file extension
    _, file_extension = os.path.splitext(f.filename)
    # Initialize an empty string to store the extracted text
    text = ""
    # Check the file extension
    if file_extension == '.pptx':
        # Read the PowerPoint file using python-pptx
        prs = Presentation(f)
        # Loop over the slides and shapes
        for slide in prs.slides:
            for shape in slide.shapes:
                # Check if the shape has text
                if shape.has_text_frame and shape.text_frame.has_text:
                    # Append the text to the text string
                    text += shape.text + "\n"
    elif file_extension == '.pdf':
        # Read the PDF file using pymupdf
        doc = fitz.open(stream=f.read(), filetype='pdf')
        # Loop over the pages
        for page in doc:
            # Get the text of the page
            text += page.get_text('text') + "\n"
    else:
        # Return an error message if the file extension is not supported
        return "Unsupported file format. Please upload a PowerPoint or PDF file."
    # Return the text as a Flask response
    return text


#Working
@app.route('/display/<filename>')
def display (filename):
    # Get the uploaded file from the request
    f = filename
    print ("File name"  + str(f))
    # Get the file extension
    _, file_extension = os.path.splitext(filename)
    
    print ("Extension" + file_extension)
    # Initialize an empty string to store the extracted text
    text = ""
    # Check the file extension
    if file_extension == '.pptx':
        # Read the PowerPoint file using python-pptx
        prs = Presentation(r'C:\Users\selon\Documents\Bete Christian\Mezmur\1-29-2023.pptx')
        print("test1")
        # Loop over the slides and shapes
        for slide in prs.slides:
            print("test2")
            for shape in slide.shapes:
                # Check if the shape has text
                if shape.has_text_frame and shape.text_frame.text:
                    # Append the text to the text string
                    text += shape.text + "\n"
                    print(text)
    elif file_extension == '.pdf':
        # Read the PDF file using pymupdf
        doc = fz.open(stream=f.read(), filetype='pdf')
        # Loop over the pages
        for page in doc:
            # Get the text of the page
            text += page.get_text('text') + "\n"
    else:
        # Return an error message if the file extension is not supported
        return "Unsupported file format. Please upload a PowerPoint or PDF file."
    # Return the text as a Flask response
    return render_template("index.html", text=text)


# Read a line from a file and strip the newline character
line = file.readline().strip()

# Get the value associated with a key or return None if the key is not in the dictionary
value = my_map.get(key, None)



import os
import PyPDF2
import fitz

f = "07-17-2022.pdf"
file_size = os.path.getsize(f) # get the file size in bytes
if file_size == 0: # if the file is empty
    print("The file is empty.")
else: # if the file is not empty
    try: # try to read the file as a PDF
        pdf_reader = PyPDF2.PdfFileReader(f)
        if pdf_reader.isEncrypted: # if the file is encrypted
            print("The file is encrypted.")
        else: # if the file is not encrypted
            doc = fitz.open(filename=f, filetype="pdf") # open the file with fitz
            # do something with the doc
    except PyPDF2.utils.PdfReadError: # if the file is not a valid PDF
        print("The file is not a valid PDF.")
